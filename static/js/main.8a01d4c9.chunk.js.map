{"version":3,"sources":["components/Header/index.js","components/InputModal/index.js","components/Task/index.js","components/Board/index.js","containers/UserBoards/index.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","justify","align","style","width","xs","md","Title","ellipsis","level","color","title","Group","icon","UserOutlined","Text","InputModal","open","onSave","onCancel","type","isEditModal","data","Form","useForm","form","useEffect","resetFields","handleSubmit","values","hasError","value","visible","onOk","submit","onFinish","onFinishFailed","v","initialValues","Item","label","name","rules","required","message","String","toLowerCase","autoFocus","defaultProps","Task","userIndex","taskIndex","openModal","onDeleteTask","JSON","stringify","EditOutlined","onClick","CloseOutlined","Board","updateUserData","onTaskMoved","useState","inputModalOpen","inputModalData","index","state","setState","val","Number","isFinite","confirmDelete","taskIdx","Modal","confirm","tasks","ExclamationCircleOutlined","content","updatedTasks","splice","user","types","onDrop","parse","task","fromUserIndex","extra","fontSize","dataSource","size","renderItem","item","i","length","footer","PlusCircleOutlined","UserBoards","users","fromTaskIndex","toUserIndex","updatedUsers","movedTask","push","grid","gutter","sm","lg","xl","xxl","u","del","idx","deleteFlag","App","Content","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a01d4c9.chunk.js","sourcesContent":["/**\n * header component of the app\n */\nimport React from 'react'\nimport { Layout, Typography, Avatar, Row, Col } from 'antd'\nimport { UserOutlined } from '@ant-design/icons';\n\nconst Header = () => {\n  return <Layout.Header className=\"disp-flex vcenter\">\n    <Row justify=\"space-between\" align=\"middle\" style={{ width: '100%' }} >\n      <Col xs={20} md={14}>\n        <Typography.Title ellipsis level={4} style={{ color: '#fff' }} title=\"Task Management System\">Task Management System</Typography.Title>\n      </Col>\n      <Col xs={4} md={10}>\n        <Avatar.Group title=\"Guest User\" className=\"disp-flex justify-end vcenter\" >\n          <Avatar icon={<UserOutlined />} />\n          <Typography.Text ellipsis className=\"clr-white margin-l-md guest-user-text\">Guest User</Typography.Text>\n        </Avatar.Group>\n      </Col>\n    </Row>\n  </Layout.Header>\n}\n\nexport default Header","/**\n * single input form modal\n * based on the props serves the name of user or task (provides edit input also)\n */\nimport React, { useEffect } from \"react\";\nimport { Modal, Form, Input } from \"antd\";\n\nconst InputModal = ({ open, onSave, onCancel, type, isEditModal, data }) => {\n  const [form] = Form.useForm();\n  useEffect(() => {\n    if (open) {\n      form.resetFields();\n    }\n  }, [open, form]);\n  const handleSubmit = (values, hasError) => {\n    if (!hasError) {\n      onSave(values.value, type);\n    }\n  };\n  return (\n    <Modal\n      title={`${isEditModal ? \"Edit\" : \"Add\"} ${type}`}\n      visible={open}\n      onCancel={onCancel}\n      onOk={() => form.submit()}\n    >\n      <Form\n        form={form}\n        onFinish={handleSubmit}\n        onFinishFailed={(v) => handleSubmit(v, true)}\n        initialValues={isEditModal ? { value: data } : {}}\n      >\n        <Form.Item\n          label={`${type} name`}\n          name=\"value\"\n          rules={[\n            {\n              required: true,\n              message: `Please input ${String(type).toLowerCase()} name`,\n            },\n          ]}\n        >\n          <Input autoFocus />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nInputModal.defaultProps = {\n  open: false,\n  onSave: () => null,\n  onCancel: () => null,\n  type: \"User\",\n  isEditModal: false,\n  data: \"\",\n};\n\nexport default InputModal;\n","/**\n * task component\n * renders the task and gives the option to edit and delete it\n */\nimport React from 'react'\nimport { Draggable } from 'react-drag-and-drop'\nimport { List, Space } from 'antd'\nimport { EditOutlined, CloseOutlined } from '@ant-design/icons'\n\nconst Task = ({ userIndex, taskIndex, data, openModal, onDeleteTask }) => {\n  return <Draggable\n    className=\"move task-list-item\"\n    type=\"task\"\n    data={JSON.stringify([userIndex, taskIndex])}\n  >\n    <List.Item>\n      <span className=\"task-text\">{data}</span>\n      <Space>\n        <EditOutlined title=\"Edit task\" onClick={() => openModal('Task', data, taskIndex)} />\n        <CloseOutlined title=\"Delete task\" onClick={() => onDeleteTask()} />\n      </Space>\n    </List.Item>\n  </Draggable>\n}\n\nTask.defaultProps = {\n  data: '',\n  openModal: () => null,\n  onDeleteTask: () => null,\n}\n\nexport default Task","/**\n * board component of the user\n * maintains the tasks of the individual user\n */\nimport React, { useState } from \"react\";\nimport { List, Typography, Card, Modal } from \"antd\";\nimport {\n  EditOutlined,\n  ExclamationCircleOutlined,\n  CloseOutlined,\n  PlusCircleOutlined,\n} from \"@ant-design/icons\";\nimport { Droppable } from \"react-drag-and-drop\";\nimport InputModal from \"../InputModal\";\nimport Task from \"../Task\";\n\nconst Board = ({ data, updateUserData, onTaskMoved, userIndex }) => {\n  const [state, setState] = useState({\n    inputModalOpen: false,\n    inputModalData: {\n      type: \"Task\",\n      isEditModal: false,\n      data: \"\",\n      index: -1,\n    },\n  });\n  const onInputModalSave = (value, type) => {\n    if (type === \"Task\" && !state.inputModalData.isEditModal) {\n      // add task\n      updateUserData({\n        ...data,\n        tasks: [...data.tasks, value],\n      });\n    } else if (type === \"Task\" && state.inputModalData.isEditModal) {\n      // edit task\n      const updatedTasks = [...data.tasks];\n      updatedTasks[state.inputModalData.index] = value;\n      updateUserData({\n        ...data,\n        tasks: updatedTasks,\n      });\n    } else if (type === \"User\" && state.inputModalData.isEditModal) {\n      // edit user\n      updateUserData({\n        ...data,\n        user: value,\n      });\n    }\n    setState({\n      ...state,\n      inputModalOpen: false,\n    });\n  };\n  const onInputModalCancel = () => {\n    setState({\n      ...state,\n      inputModalOpen: false,\n    });\n  };\n  const openModal = (type, val, index) =>\n    setState({\n      ...state,\n      inputModalOpen: true,\n      inputModalData: {\n        type,\n        isEditModal: !!val,\n        data: val,\n        index: Number.isFinite(index) ? index : -1,\n      },\n    });\n  const confirmDelete = (taskIdx) => {\n    if (Number.isFinite(taskIdx)) {\n      // confirm deletion for task\n      Modal.confirm({\n        title: `Delete ${data.tasks[taskIdx]}`,\n        icon: <ExclamationCircleOutlined />,\n        content: `Are you sure want to delete ${data.tasks[taskIdx]} ?`,\n        onOk() {\n          const updatedTasks = [...data.tasks];\n          updatedTasks.splice(taskIdx, 1);\n          updateUserData({ ...data, tasks: updatedTasks });\n        },\n      });\n    } else {\n      // confirm deletion for user\n      Modal.confirm({\n        title: `Delete ${data.user}`,\n        icon: <ExclamationCircleOutlined />,\n        content: `Are you sure want to delete ${data.user} ?`,\n        onOk() {\n          updateUserData(data, true);\n        },\n      });\n    }\n  };\n  const onDrop = (data) => {\n    const [fromUserIndex, taskIndex] = JSON.parse(data.task);\n    if (userIndex !== fromUserIndex) {\n      onTaskMoved(fromUserIndex, taskIndex, userIndex);\n    }\n  };\n  return (\n    <Droppable types={[\"task\"]} onDrop={onDrop}>\n      <Card\n        title={<Typography.Text title={data.user}>{data.user}</Typography.Text>}\n        extra={[\n          <EditOutlined\n            title=\"Edit user name\"\n            className=\"margin-r-md\"\n            style={{ fontSize: 20 }}\n            key=\"edit\"\n            onClick={() => openModal(\"User\", data.user)}\n          />,\n          <CloseOutlined\n            title=\"Delete user\"\n            style={{ fontSize: 20 }}\n            key=\"delete\"\n            onClick={() => confirmDelete()}\n          />,\n        ]}\n      >\n        <List\n          className=\"tasks-list\"\n          dataSource={data.tasks}\n          size=\"small\"\n          renderItem={(item, i) => (\n            <Task\n              key={`${i}_${data.tasks.length}`}\n              userIndex={userIndex}\n              taskIndex={i}\n              data={item}\n              openModal={openModal}\n              onDeleteTask={() => confirmDelete(i)}\n            />\n          )}\n          footer={\n            <div className=\"disp-flex center\">\n              <PlusCircleOutlined\n                title=\"Add task\"\n                style={{ fontSize: 20 }}\n                onClick={() => openModal(\"Task\")}\n              />\n            </div>\n          }\n        />\n        <InputModal\n          open={state.inputModalOpen}\n          onSave={onInputModalSave}\n          onCancel={onInputModalCancel}\n          {...state.inputModalData}\n        />\n      </Card>\n    </Droppable>\n  );\n};\n\nBoard.defaultProps = {\n  updateUserData: () => null,\n  onTaskMoved: () => null,\n  data: {\n    user: \"\",\n    tasks: [],\n  },\n};\n\nexport default Board;\n","/**\n * user boards container\n * maintains the state of users and their tasks\n */\nimport React, { useState } from \"react\";\nimport Board from \"../../components/Board\";\nimport { Button, List } from \"antd\";\nimport InputModal from \"../../components/InputModal\";\n\nconst UserBoards = () => {\n  const [state, setState] = useState({\n    users: [],\n    inputModalOpen: false,\n  });\n  const onInputModalSave = (value) => {\n    setState({\n      ...state,\n      inputModalOpen: false,\n      users: [...state.users, { user: value, tasks: [] }],\n    });\n  };\n  const onInputModalCancel = () => {\n    setState({\n      ...state,\n      inputModalOpen: false,\n    });\n  };\n  const addUser = () =>\n    setState({\n      ...state,\n      inputModalOpen: true,\n    });\n  const updateUserData = (user, idx, deleteFlag) => {\n    const updatedUsers = [...state.users];\n    if (deleteFlag) {\n      updatedUsers.splice(idx, 1);\n    } else {\n      updatedUsers[idx] = user;\n    }\n    setState({\n      ...state,\n      users: updatedUsers,\n    });\n  };\n  const onTaskMoved = (fromUserIndex, fromTaskIndex, toUserIndex) => {\n    const updatedUsers = [...state.users];\n    const movedTask = updatedUsers[fromUserIndex].tasks.splice(\n      fromTaskIndex,\n      1\n    );\n    updatedUsers[toUserIndex].tasks.push(movedTask);\n    setState({\n      ...state,\n      users: updatedUsers,\n    });\n  };\n  return (\n    <div className=\"users-board\">\n      <div className=\"disp-flex justify-end margin-b-lg\">\n        <Button title=\"Add new user\" onClick={addUser}>\n          Add User\n        </Button>\n      </div>\n      <List\n        grid={{ gutter: 25, xs: 1, sm: 1, md: 2, lg: 4, xl: 6, xxl: 6 }}\n        dataSource={state.users}\n        renderItem={(user, i) => (\n          <List.Item key={`${i}_${user.tasks.length}`}>\n            <Board\n              userIndex={i}\n              data={user}\n              updateUserData={(u, del) => updateUserData(u, i, del)}\n              onTaskMoved={onTaskMoved}\n            />\n          </List.Item>\n        )}\n      />\n      <InputModal\n        open={state.inputModalOpen}\n        onSave={onInputModalSave}\n        onCancel={onInputModalCancel}\n      />\n    </div>\n  );\n};\n\nexport default UserBoards;\n","import React from 'react'\nimport Header from './components/Header'\nimport { Layout } from 'antd'\nimport UserBoards from './containers/UserBoards'\n\nconst App = () => <>\n  <Header />\n  <Layout.Content>\n    <UserBoards />\n  </Layout.Content>\n</>\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}