{"version":3,"sources":["components/Header/index.js","components/InputModal/index.js","components/Task/index.js","components/Board/index.js","containers/UserBoards/index.js","App.js","reportWebVitals.js","index.js"],"names":["Header","_jsx","Layout","className","children","_jsxs","Row","justify","align","style","width","Col","xs","md","Typography","Title","ellipsis","level","color","title","Avatar","Group","icon","UserOutlined","Text","InputModal","_ref","open","onSave","onCancel","type","isEditModal","data","form","Form","useForm","useEffect","resetFields","handleSubmit","values","hasError","value","Modal","concat","visible","onOk","submit","onFinish","onFinishFailed","v","initialValues","Item","label","name","rules","required","message","String","toLowerCase","Input","autoFocus","defaultProps","Task","userIndex","taskIndex","openModal","onDeleteTask","Draggable","JSON","stringify","List","Space","EditOutlined","onClick","CloseOutlined","Board","updateUserData","onTaskMoved","state","setState","useState","inputModalOpen","inputModalData","index","val","_objectSpread","Number","isFinite","confirmDelete","taskIdx","confirm","tasks","ExclamationCircleOutlined","content","updatedTasks","splice","user","Droppable","types","onDrop","fromUserIndex","parse","task","Card","extra","fontSize","dataSource","size","renderItem","item","i","length","footer","PlusCircleOutlined","onInputModalSave","onInputModalCancel","UserBoards","updateState","users","localStorage","getItem","useCallback","st","arguments","undefined","setItem","fromTaskIndex","toUserIndex","updatedUsers","movedTask","push","Button","addUser","grid","gutter","sm","lg","xl","xxl","u","del","idx","deleteFlag","App","_Fragment","Content","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ea7530f7.chunk.js","sourcesContent":["/**\n * header component of the app\n */\nimport React from 'react'\nimport { Layout, Typography, Avatar, Row, Col } from 'antd'\nimport { UserOutlined } from '@ant-design/icons';\n\nconst Header = () => {\n  return <Layout.Header className=\"disp-flex vcenter\">\n    <Row justify=\"space-between\" align=\"middle\" style={{ width: '100%' }} >\n      <Col xs={20} md={14}>\n        <Typography.Title ellipsis level={4} style={{ color: '#fff' }} title=\"Task Management System\">Task Management System</Typography.Title>\n      </Col>\n      <Col xs={4} md={10}>\n        <Avatar.Group title=\"Guest User\" className=\"disp-flex justify-end vcenter\" >\n          <Avatar icon={<UserOutlined />} />\n          <Typography.Text ellipsis className=\"clr-white margin-l-md guest-user-text\">Guest User</Typography.Text>\n        </Avatar.Group>\n      </Col>\n    </Row>\n  </Layout.Header>\n}\n\nexport default Header","/**\n * single input form modal\n * based on the props serves the name of user or task (provides edit input also)\n */\nimport React, { useEffect } from \"react\";\nimport { Modal, Form, Input } from \"antd\";\n\nconst InputModal = ({ open, onSave, onCancel, type, isEditModal, data }) => {\n  const [form] = Form.useForm();\n  useEffect(() => {\n    if (open) {\n      form.resetFields();\n    }\n  }, [open, form]);\n  const handleSubmit = (values, hasError) => {\n    if (!hasError) {\n      onSave(values.value, type);\n    }\n  };\n  return (\n    <Modal\n      title={`${isEditModal ? \"Edit\" : \"Add\"} ${type}`}\n      visible={open}\n      onCancel={onCancel}\n      onOk={() => form.submit()}\n    >\n      <Form\n        form={form}\n        onFinish={handleSubmit}\n        onFinishFailed={(v) => handleSubmit(v, true)}\n        initialValues={isEditModal ? { value: data } : {}}\n      >\n        <Form.Item\n          label={`${type} name`}\n          name=\"value\"\n          rules={[\n            {\n              required: true,\n              message: `Please input ${String(type).toLowerCase()} name`,\n            },\n          ]}\n        >\n          <Input autoFocus />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nInputModal.defaultProps = {\n  open: false,\n  onSave: () => null,\n  onCancel: () => null,\n  type: \"User\",\n  isEditModal: false,\n  data: \"\",\n};\n\nexport default InputModal;\n","/**\n * task component\n * renders the task and gives the option to edit and delete it\n */\nimport React from 'react'\nimport { Draggable } from 'react-drag-and-drop'\nimport { List, Space } from 'antd'\nimport { EditOutlined, CloseOutlined } from '@ant-design/icons'\n\nconst Task = ({ userIndex, taskIndex, data, openModal, onDeleteTask }) => {\n  return <Draggable\n    className=\"move task-list-item\"\n    type=\"task\"\n    data={JSON.stringify([userIndex, taskIndex])}\n  >\n    <List.Item>\n      <span className=\"task-text\">{data}</span>\n      <Space>\n        <EditOutlined title=\"Edit task\" onClick={() => openModal('Task', data, taskIndex)} />\n        <CloseOutlined title=\"Delete task\" onClick={() => onDeleteTask()} />\n      </Space>\n    </List.Item>\n  </Draggable>\n}\n\nTask.defaultProps = {\n  data: '',\n  openModal: () => null,\n  onDeleteTask: () => null,\n}\n\nexport default Task","/**\n * board component of the user\n * maintains the tasks of the individual user\n */\nimport React, { useState } from \"react\";\nimport { List, Typography, Card, Modal } from \"antd\";\nimport {\n  EditOutlined,\n  ExclamationCircleOutlined,\n  CloseOutlined,\n  PlusCircleOutlined,\n} from \"@ant-design/icons\";\nimport { Droppable } from \"react-drag-and-drop\";\nimport InputModal from \"../InputModal\";\nimport Task from \"../Task\";\n\nconst Board = ({ data, updateUserData, onTaskMoved, userIndex }) => {\n  const [state, setState] = useState({\n    inputModalOpen: false,\n    inputModalData: {\n      type: \"Task\",\n      isEditModal: false,\n      data: \"\",\n      index: -1,\n    },\n  });\n  const onInputModalSave = (value, type) => {\n    if (type === \"Task\" && !state.inputModalData.isEditModal) {\n      // add task\n      updateUserData({\n        ...data,\n        tasks: [...data.tasks, value],\n      });\n    } else if (type === \"Task\" && state.inputModalData.isEditModal) {\n      // edit task\n      const updatedTasks = [...data.tasks];\n      updatedTasks[state.inputModalData.index] = value;\n      updateUserData({\n        ...data,\n        tasks: updatedTasks,\n      });\n    } else if (type === \"User\" && state.inputModalData.isEditModal) {\n      // edit user\n      updateUserData({\n        ...data,\n        user: value,\n      });\n    }\n    setState({\n      ...state,\n      inputModalOpen: false,\n    });\n  };\n  const onInputModalCancel = () => {\n    setState({\n      ...state,\n      inputModalOpen: false,\n    });\n  };\n  const openModal = (type, val, index) =>\n    setState({\n      ...state,\n      inputModalOpen: true,\n      inputModalData: {\n        type,\n        isEditModal: !!val,\n        data: val,\n        index: Number.isFinite(index) ? index : -1,\n      },\n    });\n  const confirmDelete = (taskIdx) => {\n    if (Number.isFinite(taskIdx)) {\n      // confirm deletion for task\n      Modal.confirm({\n        title: `Delete ${data.tasks[taskIdx]}`,\n        icon: <ExclamationCircleOutlined />,\n        content: `Are you sure want to delete ${data.tasks[taskIdx]} ?`,\n        onOk() {\n          const updatedTasks = [...data.tasks];\n          updatedTasks.splice(taskIdx, 1);\n          updateUserData({ ...data, tasks: updatedTasks });\n        },\n      });\n    } else {\n      // confirm deletion for user\n      Modal.confirm({\n        title: `Delete ${data.user}`,\n        icon: <ExclamationCircleOutlined />,\n        content: `Are you sure want to delete ${data.user} ?`,\n        onOk() {\n          updateUserData(data, true);\n        },\n      });\n    }\n  };\n  const onDrop = (data) => {\n    const [fromUserIndex, taskIndex] = JSON.parse(data.task);\n    if (userIndex !== fromUserIndex) {\n      onTaskMoved(fromUserIndex, taskIndex, userIndex);\n    }\n  };\n  return (\n    <Droppable types={[\"task\"]} onDrop={onDrop}>\n      <Card\n        title={<Typography.Text title={data.user}>{data.user}</Typography.Text>}\n        extra={[\n          <EditOutlined\n            title=\"Edit user name\"\n            className=\"margin-r-md\"\n            style={{ fontSize: 20 }}\n            key=\"edit\"\n            onClick={() => openModal(\"User\", data.user)}\n          />,\n          <CloseOutlined\n            title=\"Delete user\"\n            style={{ fontSize: 20 }}\n            key=\"delete\"\n            onClick={() => confirmDelete()}\n          />,\n        ]}\n      >\n        <List\n          className=\"tasks-list\"\n          dataSource={data.tasks}\n          size=\"small\"\n          renderItem={(item, i) => (\n            <Task\n              key={`${i}_${data.tasks.length}`}\n              userIndex={userIndex}\n              taskIndex={i}\n              data={item}\n              openModal={openModal}\n              onDeleteTask={() => confirmDelete(i)}\n            />\n          )}\n          footer={\n            <div className=\"disp-flex center\">\n              <PlusCircleOutlined\n                title=\"Add task\"\n                style={{ fontSize: 20 }}\n                onClick={() => openModal(\"Task\")}\n              />\n            </div>\n          }\n        />\n        <InputModal\n          open={state.inputModalOpen}\n          onSave={onInputModalSave}\n          onCancel={onInputModalCancel}\n          {...state.inputModalData}\n        />\n      </Card>\n    </Droppable>\n  );\n};\n\nBoard.defaultProps = {\n  updateUserData: () => null,\n  onTaskMoved: () => null,\n  data: {\n    user: \"\",\n    tasks: [],\n  },\n};\n\nexport default Board;\n","/**\n * user boards container\n * maintains the state of users and their tasks\n */\nimport React, { useCallback, useState } from \"react\";\nimport Board from \"../../components/Board\";\nimport { Button, List } from \"antd\";\nimport InputModal from \"../../components/InputModal\";\n\nconst UserBoards = () => {\n  const [state, updateState] = useState({\n    users: JSON.parse(localStorage.getItem('users') || '[]'),\n    inputModalOpen: false,\n  });\n  const setState = useCallback(\n    (st = {}) => {\n      updateState(st)\n      localStorage.setItem('users', JSON.stringify(st.users || []))\n    }, [updateState]\n  )\n  const onInputModalSave = (value) => {\n    setState({\n      ...state,\n      inputModalOpen: false,\n      users: [...state.users, { user: value, tasks: [] }],\n    });\n  };\n  const onInputModalCancel = () => {\n    setState({\n      ...state,\n      inputModalOpen: false,\n    });\n  };\n  const addUser = () =>\n    setState({\n      ...state,\n      inputModalOpen: true,\n    });\n  const updateUserData = (user, idx, deleteFlag) => {\n    const updatedUsers = [...state.users];\n    if (deleteFlag) {\n      updatedUsers.splice(idx, 1);\n    } else {\n      updatedUsers[idx] = user;\n    }\n    setState({\n      ...state,\n      users: updatedUsers,\n    });\n  };\n  const onTaskMoved = (fromUserIndex, fromTaskIndex, toUserIndex) => {\n    const updatedUsers = [...state.users];\n    const movedTask = updatedUsers[fromUserIndex].tasks.splice(\n      fromTaskIndex,\n      1\n    );\n    updatedUsers[toUserIndex].tasks.push(movedTask);\n    setState({\n      ...state,\n      users: updatedUsers,\n    });\n  };\n  return (\n    <div className=\"users-board\">\n      <div className=\"disp-flex justify-end margin-b-lg\">\n        <Button title=\"Add new user\" onClick={addUser}>\n          Add User\n        </Button>\n      </div>\n      <List\n        grid={{ gutter: 25, xs: 1, sm: 1, md: 2, lg: 4, xl: 6, xxl: 6 }}\n        dataSource={state.users}\n        renderItem={(user, i) => (\n          <List.Item key={`${i}_${user.tasks.length}`}>\n            <Board\n              userIndex={i}\n              data={user}\n              updateUserData={(u, del) => updateUserData(u, i, del)}\n              onTaskMoved={onTaskMoved}\n            />\n          </List.Item>\n        )}\n      />\n      <InputModal\n        open={state.inputModalOpen}\n        onSave={onInputModalSave}\n        onCancel={onInputModalCancel}\n      />\n    </div>\n  );\n};\n\nexport default UserBoards;\n","import React from 'react'\nimport Header from './components/Header'\nimport { Layout } from 'antd'\nimport UserBoards from './containers/UserBoards'\n\nconst App = () => <>\n  <Header />\n  <Layout.Content>\n    <UserBoards />\n  </Layout.Content>\n</>\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}